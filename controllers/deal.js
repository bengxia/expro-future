var models = require('../models');var Deal = models.Deal;var Deal_item = models.Deal_item;var Member = models.Member;var config = require('../config').config;var EventProxy = require('eventproxy').EventProxy;var Log = require('../log.js');var log = Log.create(Log.INFO, {'file':'public/node.debug'});var MQClient = require('../libs/mq_client.js');var getNow=function(){    var now = new Date();    var year = now.getFullYear();    return (year+'-'+(now.getMonth()+1)+'-'+now.getDate()+' '+        now.getHours()+':'+now.getMinutes()+':'+now.getSeconds());};/** * 开始设置前台表格控件说需要的相关对象及参数Start *///设置查询区域的查询输入框，规则：{"查询字段名":"页面显示的label文字"}var queryInput = {'_id':'编号','payment':'应付账款','cash':'现金支付','point':'积分支付'};//设置前台页面显示的表格列头var colNames = ['编号', '交易类型', '状态','负责人','应付账款','现金支付','积分支付','支付类型','创建时间','消费会员'];//设置前台页面显示的表格数据var colModel = [    {name:'ef_deal._id',index:'ef_deal._id', width:100, align:'center',sortable:true},    {name:'ef_deal.type',index:'ef_deal.type', width:200, align:'center',sortable:true,formatter:'select',        editoptions:{value:'0:消费撤销;1:消费;2:充值;3:充值撤销;4:积分增加;5:积分消费;6:积分撤销;7:退货退款;8:抽奖;9:手工调整'}},    {name:'ef_deal.state',index:'ef_deal.state', width:200, align:'center',sortable:true,formatter:'select',        editoptions:{value:'0:失败;1:成功'}},    {name:'ef_member.operater_name',index:'ef_member.operater_name', width:200,align:'center',sortable:false},    {name:'ef_deal.payment',index:'ef_deal.payment', width:200, align:'center',sortable:true},    {name:'ef_deal.cash',index:'ef_deal.cash', width:200, align:'center',sortable:true},    {name:'ef_deal.point',index:'ef_deal.point', width:200, align:'center',sortable:true},    {name:'ef_deal.pay_type',index:'ef_deal.pay_type', width:200, align:'center',sortable:true,formatter:'select',        editoptions:{value:'0:现金;1:银行卡;2:积分;3:现金+积分;4:银行卡+积分'}},    {name:'ef_deal.create_time',index:'ef_deal.create_time', width:300, align:'center',sortable:true,        formatter : 'date', formatoptions : {srcformat : 'Y-m-d H:i:s',newformat : 'Y-m-d H:i:s'}},    {name:'ef_member.customer_name',index:'ef_member.customer_name', width:200,align:'center',sortable:false}];//设置前台页面所要显示的数据字段,用于数据筛选var showElement = getShowElement();//同上function getShowElement(){    var ar = new Array();    for(var i=0; i<colModel.length; i++){        ar[i] = colModel[i].name;    }    return ar;}////设置前台表格控件说需要的相关对象及参数End//此方法由孟维修改，屏蔽报错，未实现业务功能，可在合并时被覆盖。exports.creatDeal = function(req, res) {	var deal_item = req.body.deal.deal_item;	delete req.body.deal.deal_item;	delete req.body.deal._id;		var options = {		table: 'ef_deal',		fields: req.body.deal 	};		Deal.create(options, function(err, info) {		var len = deal_item.length;		for(var i = 0; i < len; i++) {			delete deal_item[i]._id;			deal_item[i].deal_id = info._id;			var opt = {				table: 'ef_deal_item',				fields: deal_item											}}	});};/** * 显示交易列表 * @param req * @param res * @param next */exports.index = function(req,res,next){    if(req.accepts('html')) {        res.render('deal/index', {queryInput:queryInput, colModel:colModel, colNames:colNames});    }else{        var ep = EventProxy.create();        //根据前台页面传入的查询条件，开始拼接where语句        var where = ' ';        for(key in queryInput){            var value = req.query[key];            if(value != undefined){                where += ' and '+key+' like \'%'+value+'%\' ';            }        }        //回调函数        function feedback(result) {            if(200 == result.status) {                if(result.jsonObj) {                    var jsonStr = JSON.stringify(result.jsonObj);                    console.log('jsonStr:'+jsonStr);                    res.json(result.jsonObj, result.status);                }else{                    ep.trigger('error', {status:204, error:'查询结果为空!'});                }            }            else {                return res.json(result);            }        };        //当有异常发生时触发        ep.once('error', function(result) {            ep.unbind();//remove all event            return feedback(result);        });        //查询商户下所有的员工        ep.on('findMembersByOrgId', function(org_id) {            findMembersByOrgId(org_id);        });        //查询当前所有会员的信息，在此方法内部会关联user，role，merchant表，并进行分页处理        ep.on('findDealCount', function(where) {            findDealCount(where);        });        ep.on('findAllDeal', function(count) {            findAllDeal(count, where);        });        //将传入的json对象发布到前台页面进行表格展示。        ep.on('showList', function(jsonObj) {            feedback({status:200, error:'获取数据成功', jsonObj:jsonObj});        });        //首先获取当前登陆用户的org_id，查询当前用户的商户id        if(req.session.user.member.org_id) ep.trigger('findMembersByOrgId', req.session.user.member.org_id);        //查询商户下所有的员工,并将查询到的member ids 拼接到已有where语句后，形成如下形式：        //" and operater_id in( 24, 23, 25, 26)";        function findMembersByOrgId(org_id){            Member.findAll({where:' and org_id='+org_id}, function(err, rs){                if(err) { ep.unbind(); return next(err);}                if (!rs || rs == undefined) return ep.trigger('error', {status:204, error:'商户查询结果为空！'});                where += " and operater_id in(";                for(var i=0; i<rs.length; i++){                    where += " "+rs[i]._id;                    if(i != rs.length-1){                        where += ",";                    }else{                        where += ") ";                    }                }                ep.trigger('findDealCount', where);            });        }        //查询count数        function findDealCount(where){            //获得数据行数，用于分页计算            Deal.count({where:where}, function(err, count) {                if(err) { ep.unbind(); return next(err);}                if (!count && !count.count) return ep.trigger('error', {status:204, error:'查询结果为空!'});                ep.trigger('findAllDeal', count.count, where);            });        }        function findAllDeal(count, where) {            //开始获取客户端传入查询条件            //start=起始的集合位置&end=结束的集合位置&bt=交易发生时间起点&et=交易发生时间的截至时间            var page = req.query.page; // 取得当前页数,注意这是jqgrid自身的参数            var limit = req.query.rows; // 取得每页显示行数，,注意这是jqgrid自身的参数            var sidx = req.query.sidx; //取得排序字段            var sord  = req.query.sord;//排序方式asc、desc            if(!sidx){                sidx = 1;            }            // 查询结果总页数            var total_pages = 0;            // 计算查询结果页数            if(count > 0 && limit > 0){                total_pages = Math.ceil(count/limit);            }            // 若请求页大于总页数，设置请求页为最后一页            if (page > total_pages) page=total_pages;            // 计算起始行            var start = limit * page - limit;            // 若起始行为0            if(start < 0) start = 0;            Deal.findAll({where:where, start:start, limit:limit, sidx:sidx, sord:sord}, function(err, rs) {                if(err) { ep.unbind(); return next(err);}                if (!rs || rs == undefined) return ep.trigger('error', {status:204, error:'查询结果为空！'});                for(var i=0; i<rs.length; i++){                    for ( key in rs[i]) {                        rs[i]["ef_deal."+key] = rs[i][key];                        delete rs[i][key];                    }                }                //开始汇总                ep.after('dealDone', rs.length, function() {                    var jsonStr = JSON.stringify(rs);                    console.log('jsonStr:'+jsonStr);                    //当memberDone被触发rs.length次后，执行以下语句。                    var jsonObj = new Object();                    jsonObj.page = page;  // 当前页                    jsonObj.total = total_pages;    // 总页数                    jsonObj.records = count;  // 总记录数                    var rowsArray = new Array();                    //开始判断：如果rs中包含前台需要显示的数据（showElement包含的名称），则赋值给ay数组并开始拼装json对象。                    for(var i=0; i<rs.length; i++){                        // 定义rows                        var rows = new Object();                        rows.id = rs[i][Deal.table+"._id"];                        var ay = new Array();                        for(key in rs[i]){                            var index = showElement.indexOf(key);                            if(index >= 0){                                ay[index] = rs[i][key];                            }                        }                        rows.cell = ay;                        rowsArray[i] = rows;                    }                    //将rows数组赋予jsonObj.rows                    jsonObj.rows = rowsArray;                    //var jsonStr = JSON.stringify(jsonObj);                    //console.log('jsonStr:'+jsonStr);                    ep.trigger('showList', jsonObj);                });                //定义rows 数组，保存所有rows数据                rs.forEach(function(deal) {                    var ep2 = EventProxy.create();                    ep2.assign('OperaterDone', 'CustomerDone', function(operaterEvent, customerEvent) {                        ep.trigger('dealDone');                    });                    Member.findOne({'_id':deal[Deal.table+".operater_id"]}, function(err, member) {                        if(err) { ep2.unbind(); return next(err);}                        if (!member || member == undefined) return ep2.trigger('error', {status:204, error:'查询member[operater_id]结果为空！'});                        deal[Member.table+".operater_name"] = member["pet_name"];                        ep2.trigger('OperaterDone', deal);                    });                    Member.findOne({'_id':deal[Deal.table+".customer_id"]}, function(err, member) {                        if(err) { ep2.unbind(); return next(err);}                        if (!member || member == undefined) return ep2.trigger('error', {status:204, error:'查询member[customer_id]结果为空！'});                        deal[Member.table+".customer_name"] = member["pet_name"];                        ep2.trigger('CustomerDone', deal);                    });                });            });        };    }};