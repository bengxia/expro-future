var models = require('../models');var User = models.User;var Role = models.Role;var Member = models.Member;var Merchant = models.Merchant;var check = require('validator').check;var sanitize = require('validator').sanitize;var crypto = require('crypto');var bcrypt = require('bcrypt');  var config = require('../config').config;var EventProxy = require('eventproxy').EventProxy;var Log = require('../log.js');var log = Log.create(Log.INFO, {'file':'public/node.debug'});var MQClient = require('../libs/mq_client.js');var getNow=function(){    var now = new Date();    var year = now.getFullYear();    return (year+'-'+(now.getMonth()+1)+'-'+now.getDate()+' '+        now.getHours()+':'+now.getMinutes()+':'+now.getSeconds());};/** * 开始设置前台表格控件说需要的相关对象及参数Start *///设置查询区域的查询输入框，规则：{"查询字段名":"页面显示的label文字"}var queryInput = {'_id':'编号','comment':'备注'};//设置前台页面显示的表格列头var colNames = ['编号', '姓名', '商户','角色名称','昵称','状态','隐私权限','创建时间','到期时间','积分','储值','备注'];//设置前台页面显示的表格数据var colModel = [{name:'ef_member._id',index:'ef_member._id', width:100, align:'center',sortable:true},    {name:'ef_user.name',index:'ef_user.name', width:200, align:'center',sortable:false},    {name:'ef_merchant.short_name',index:'ef_merchant.short_name', width:200,align:'center',sortable:false},    {name:'ef_role.name',index:'ef_role.name', width:200, align:'center',sortable:false},    {name:'ef_user.pet_name',index:'ef_user.pet_name', width:150, align:'center',sortable:false},    {name:'ef_member.state',index:'ef_member.state', width:200, align:'center',sortable:true,formatter:'select',        editoptions:{value:'0:禁用;1:启用;2:脱离'}},    {name:'ef_member.privacy',index:'ef_member.privacy', width:200, align:'center',sortable:true,formatter:'select',        editoptions:{value:'0:不开放;1:基本信息开放;8:完全开放'}},    {name:'ef_member.create_time',index:'ef_member.create_time', width:300, align:'center',sortable:true,        formatter : 'date', formatoptions : {srcformat : 'Y-m-d H:i:s',newformat : 'Y-m-d H:i:s'}},    {name:'ef_member.due_time',index:'ef_member.due_time', width:300, align:'center',sortable:true,        formatter : 'date', formatoptions : {srcformat : 'Y-m-d H:i:s',newformat : 'Y-m-d H:i:s'}},    {name:'ef_member.point',index:'ef_member.point', width:150, align:'center',sortable:true},    {name:'ef_member.savings',index:'ef_member.savings', width:150, align:'center',sortable:true},    {name:'ef_member.comment',index:'ef_member.comment', width:150, align:'center',sortable:true}];//设置前台页面所要显示的数据字段,用于数据筛选var showElement = getShowElement();//同上function getShowElement(){    var ar = new Array();    for(var i=0; i<colModel.length; i++){        ar[i] = colModel[i].name;    }    return ar;}////设置前台表格控件说需要的相关对象及参数End/** * 显示员工列表 * @param req * @param res * @param next */exports.index = function(req,res,next){    if(req.accepts('html')) {        res.render('member/index', {queryInput:queryInput, colModel:colModel, colNames:colNames});    }else{        var ep = EventProxy.create();        //根据前台页面传入的查询条件，开始拼接where语句        var where = ' ';        for(key in queryInput){            var value = req.query[key];            if(value != undefined){                where += ' and '+key+' like \'%'+value+'%\' ';            }        }        //回调函数        function feedback(result) {            if(200 == result.status) {                if(result.jsonObj) {                    res.json(result.jsonObj, result.status);                }else{                    ep.trigger('error', {status:204, error:'查询结果为空!'});                }            }            else {                res.json(result.status);            }        };        //当有异常发生时触发        ep.once('error', function(result) {            ep.unbind();//remove all event            return feedback(result);        });        //查询当前所有会员的信息，在此方法内部会关联user，role，merchant表，并进行分页处理        ep.on('findAllMember', function(count) {            findAllMember(count);        });        //将传入的json对象发布到前台页面进行表格展示。        ep.on('showList', function(jsonObj) {            feedback({status:200, error:'获取数据成功', jsonObj:jsonObj});        });        //获得数据行数，用于分页计算        Member.count({where:where}, function(err, count) {            if(err) { ep.unbind(); return next(err);}            if (!count && !count.count) return ep.trigger('error', {status:204, error:'查询结果为空!'});            ep.trigger('findAllMember', count.count);        });        function findAllMember(count) {            //开始初始化查询条件            var page = req.query.page; // 取得当前页数,注意这是jqgrid自身的参数            var limit = req.query.rows; // 取得每页显示行数，,注意这是jqgrid自身的参数            var sidx = req.query.sidx; //取得排序字段            var sord  = req.query.sord;//排序方式asc、desc            if(!sidx){                sidx = 1;            }            // 查询结果总页数            var total_pages = 0;            // 计算查询结果页数            if(count > 0 && limit > 0){                total_pages = Math.ceil(count/limit);            }            // 若请求页大于总页数，设置请求页为最后一页            if (page > total_pages) page=total_pages;            // 计算起始行            var start = limit * page - limit;            // 若起始行为0            if(start < 0) start = 0;            Member.findAll({where:where, start:start, limit:limit, sidx:sidx, sord:sord}, function(err, rs) {                if(err) { ep.unbind(); return next(err);}                if (!rs || rs == undefined) return ep.trigger('error', {status:204, error:'查询结果为空！'});                for(var i=0; i<rs.length; i++){                    for ( key in rs[i]) {                        rs[i]["ef_member."+key] = rs[i][key];                        delete rs[i][key];                    }                }                //开始汇总                ep.after('memberDone', rs.length, function() {                    //当memberDone被触发rs.length次后，执行以下语句。                    var jsonObj = new Object();                    jsonObj.page = page;  // 当前页                    jsonObj.total = total_pages;    // 总页数                    jsonObj.records = count;  // 总记录数                    var rowsArray = new Array();                    //开始判断：如果rs中包含前台需要显示的数据（showElement包含的名称），则赋值给ay数组并开始拼装json对象。                    for(var i=0; i<rs.length; i++){                        // 定义rows                        var rows = new Object();                        rows.id = rs[i][Member.table+"._id"];                        var ay = new Array();                        for(key in rs[i]){                            var index = showElement.indexOf(key);                            if(index >= 0){                                ay[index] = rs[i][key];                            }                        }                        rows.cell = ay;                        rowsArray[i] = rows;                    }                    //将rows数组赋予jsonObj.rows                    jsonObj.rows = rowsArray;                    //var jsonStr = JSON.stringify(jsonObj);                    //console.log('jsonStr:'+jsonStr);                    ep.trigger('showList', jsonObj);                });                //定义rows 数组，保存所有rows数据                rs.forEach(function(member) {                    var ep2 = EventProxy.create();                    ep2.assign('UserDone', 'RoleDone', 'OrgDone', function(userEvent, roleEvent, orgEvent) {                        ep.trigger('memberDone');                    });                    //console.log("memberid: "+member["ef_member.user_id"]);                    User.findOne({'_id':member[Member.table+".user_id"]}, function(err, user) {                        if(err) { ep2.unbind(); return next(err);}                        if (!user || user == undefined) return ep2.trigger('error', {status:204, error:'查询User结果为空！'});                        for ( key in user ) {                            member[User.table+"."+key] = user[key];                        }                        ep2.trigger('UserDone', member);                    });                    Role.findOne({'role':member[Member.table+".role_id"]}, function(err, role) {                        if(err) { ep2.unbind(); return next(err);}                        if (!role || role == undefined) return ep2.trigger('error', {status:204, error:'查询Role结果为空！'});                        for ( key in role ) {                            member[Role.table+"."+key] = role[key];                        }                        ep2.trigger('RoleDone', member);                    });                    Merchant.findOne({'_id':member[Member.table+".org_id"]}, function(err, merchant) {                        if(err) { ep2.unbind(); return next(err);}                        if (!merchant || merchant == undefined) return ep2.trigger('error', {status:204, error:'查询Merchant结果为空！'});                        for ( key in merchant ) {                            member[Merchant.table+"."+key] = merchant[key];                        }                        ep2.trigger('OrgDone', member);                    });                });            });        };    }};/** * 显示新增员工（无_id）,或已有员工（有_id）页面 * @param req * @param res * @param next * @return {*} */exports.showMember = function(req, res, next) {    console.log("开始显示 新建||编辑||查看 弹出框。。。"+req.query._id);    var _id = req.params._id;    var isEdit = req.params.isEdit?req.params.isEdit:"false";    // 本页面有3个状态： 新增， 查看， 编辑    // - 新增： _id 为空，isReadonly=false, 所有输入框为空，显示：保存按钮    // - 编辑： _id不为空，isReadonly=false， 输入框有数据，显示：保存按钮 + 关闭按钮    // - 查看： _id不为空，isReadonly=true， 输入框有数据，显示：关闭按钮    var isReadonly = false;    var isShowSaveBt = true;    var ep = EventProxy.create();    //当有异常发生时触发    ep.once('error', function(result) {        ep.unbind();//remove all event        return feedback(result);    });    //查询当前ID会员的信息    ep.on('findUser', function(memberId) {        findUser(memberId);    });    //查询所有权限，用于下拉列表    ep.on('findAllRoles', function() {        findAllRoles();    });    ep.assign('UserDone', 'RoleDone', 'MemberDone', function(user, roles, member) {        if(member){            res.render('member/member',                { layout: false, isReadonly:isReadonly, isShowSaveBt:isShowSaveBt, user:user, member:member, roles:roles, method:'put'});        }else{            res.render('member/member',                { layout: false, isReadonly:isReadonly, isShowSaveBt:isShowSaveBt, roles:roles, method:'post'});        }    });    //回调函数    function feedback(result) {        if(200 == result.status) {            if(result.jsonObj) {                res.json(result.jsonObj, result.status);            }else{                ep.trigger('error', {status:204, error:'查询结果为空!'});            }        }        else {            res.json(result.status);        }    };    function findAllRoles(){        Role.findAll({},function(err, ds){            if(err) return next(err);            return ep.trigger("RoleDone", ds);        });    };    function findUser(memberId){        User.findOne({"_id":memberId},function(err, ds){            if(err) return next(err);            return ep.trigger("UserDone", ds);        });    };    //如果_id不为空，则弹出编辑页面    if(_id){        //编辑 和 查看        if(!isEdit || isEdit != "true"){            //查看状态            isReadonly = true;            isShowSaveBt = false;        }        Member.findOne({"_id":_id}, function(err,ds){            if(err) return next(err);            ep.trigger("findUser", ds._id);            ep.trigger("findAllRoles");//获得角色列表            ep.trigger("MemberDone", ds);        });    }else{        //新增        ep.trigger("UserDone");        ep.trigger("findAllRoles");//获得角色列表        ep.trigger("MemberDone");    }};exports.saveMember = function(req,res,next){    console.log("saveMember。。。");    //开始校验输入数值的正确性    var name = req.body.pet_name;    if(!name) return res.json({status:'昵称不能为空！'});    //说明是新增    //创建时间    req.body.create_time = getNow();    Member.create(req.body, function(err, info){        if(err) return next(err);        res.json({status:'success'});    });};exports.updateMember = function(req,res,next){    console.log("updateMember。。。");    //开始校验输入数值的正确性    var _id = req.body._id;    var name = req.body.pet_name;    if(!_id) return res.json({status:'更新失败，数据流水号为空！'});    if(!pet_name) return res.json({status:'昵称不能为空！'});    if(_id){        //说明是更新数据        Member.update(req.body, function(err,info){            if(err) return next(err);            res.json({status:'success'});        });    }};exports.deleteGoods = function(req,res,next){    //开始校验输入数值的正确性    console.log("开始进行删除。。。。");    var _ids = req.params._ids;    console.log('_ids:'+_ids);    //console.log('parent._ids:'+parent._ids);    Goods.delete(_ids, function(err,ds){        if(err) return next(err);        return res.json({'_ids':_ids});    });};