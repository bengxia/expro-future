var models = require('../models');var User = models.User;var Role = models.Role;var Member = models.Member;var check = require('validator').check;var sanitize = require('validator').sanitize;var crypto = require('crypto');var bcrypt = require('bcrypt');  var config = require('../config').config;var EventProxy = require('eventproxy').EventProxy;var Log = require('../log.js');var log = Log.create(Log.INFO, {'file':'public/node.debug'});var MQClient = require('../libs/mq_client.js');/** * 显示员工列表 * @param req * @param res * @param next */exports.index = function(req,res,next){    //设置查询区域的查询输入框，规则：{"查询字段名":"页面显示的label文字"}    var queryInput = {'_id':'编号','comment':'备注'};    if(req.accepts('html')) {        res.render('member/index', {queryInput:queryInput});    }else{        var ep = EventProxy.create();        //根据前台页面传入的查询条件，开始拼接where语句        var where = ' ';        for(key in queryInput){            var value = req.query[key];            if(value != undefined){                where += ' and '+key+' like \'%'+value+'%\' ';            }        }        //回调函数        function feedback(result) {            if(200 == result.status) {                if(result.jsonObj) {                    res.json(result.jsonObj, result.status);                }            }            else {                res.json(result.status);            }        };        ep.once('error', function(result) {            ep.unbind();//remove all event            return feedback(result);        });        ep.on('findAll', function(count) {            findAll(count);        });        ep.on('showList', function(jsonObj) {            feedback({status:200, error:'获取数据成功', jsonObj:jsonObj});        });        Member.count({where:where}, function(err, count) {            if(err) { ep.unbind(); return next(err);}            if (!count) return ep.trigger('error', {status:204, error:'查询结果为空!'});            ep.trigger('findAll', count);        });        function findAll(count) {            var page = req.query.page; // 取得当前页数,注意这是jqgrid自身的参数            var limit = req.query.rows; // 取得每页显示行数，,注意这是jqgrid自身的参数            var sidx = req.query.sidx; //取得排序字段            var sord  = req.query.sord;//排序方式asc、desc            if(!sidx){                sidx = 1;            }            // 查询结果总页数            var total_pages = 0;            // 计算查询结果页数            if(count > 0 && limit > 0){                total_pages = Math.ceil(count/limit);            }            // 若请求页大于总页数，设置请求页为最后一页            if (page > total_pages) page=total_pages;            // 计算起始行            var start = limit * page - limit;            // 若起始行为0            if(start < 0) start = 0;            Member.findAll({where:where, start:start, limit:limit, sidx:sidx, sord:sord}, function(err, rs) {                if(err) { ep.unbind(); return next(err);}                if (!rs || rs == undefined) return ep.trigger('error', {status:204, error:'查询结果为空！'});                var jsonObj = new Object();                jsonObj.page = page;  // 当前页                jsonObj.total = total_pages;    // 总页数                jsonObj.records = count;  // 总记录数                //定义rows 数组，保存所有rows数据                var rowsArray = new Array();                for(var i=0; i<rs.length; i++){                    // 定义rows                    var rows = new Object();                    rows.id = rs[i]._id;                    var j = 0;                    var ay = new Array();                    for(key in rs[i]){                        ay[j] = rs[i][key];                        j++;                    }                    rows.cell = ay;                    rowsArray[i] = rows;                }                //将rows数组赋予jsonObj.rows                jsonObj.rows = rowsArray;                ep.trigger('showList', jsonObj);            });        };    }};