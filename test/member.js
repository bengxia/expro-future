//mocha test/deal.js var session = require('./session.lib.js');var logEnable = true;var sid;var dataId;var newJson = {    pet_name:"测试会员02",    cellphone:18912345678,    role_id:1,    state:1,    sex:0,    birthday:"1977-11-11",    due_time:"2024-12-30",    user_id:1,    privacy:0,    point:200,    savings:100,    comment:"备注一下"};function log(obj){    if(logEnable){        console.log(JSON.stringify(obj));    }};function signin(data, done, ct) {    session.postData('/signin', data, '', ct)        .end(function(res) {            res.statusCode.should.equal(200);            res.body.should.have.property('name');            sid = session.getSID(res);            done();        });};function addData(data, sid, done, ct) {    session.postData('/member', data, sid, ct)        .end(function(res2) {            res2.statusCode.should.equal(201);            res2.should.be.json;            log(res2.body);            dataId = res2.body.member._id;            done();        })};function findOneData(id, sid, done, ct) {    session.getData('/member/'+id, sid)        .end(function(res2) {            res2.statusCode.should.equal(200);            res2.should.be.json;            log(res2.body);            done();        })};function deleteData(id, sid, done, ct) {    session.deleteData('/member/'+id, '', sid, ct)        .end(function(res2) {            res2.statusCode.should.equal(202);            res2.should.be.json;            log(res2.body);            done();        });};function updateData(data, sid, done, ct) {    session.putData('/member', data, sid, ct)        .end(function(res2) {            res2.statusCode.should.equal(200);            res2.should.be.json;            log(res2.body);            done();        });};function getList(sid, done) {    session.getData('/members', sid)        .end(function(res) {            res.statusCode.should.equal(200);            res.should.be.json;            log(res.body);            done();        });};function memberRegJudge_beforeCreat(cellphone, sid, done, ct) {    session.getData('/memberRegJudge/'+cellphone, sid)        .end(function(res2) {            //todo 此处应该等于 202，但是考虑到需要与user的测试一起执行才能实现，留待以后完善。            res2.statusCode.should.equal(406);            res2.should.be.json;            log(res2.body);            done();        });};function memberRegJudge_afterCreat(cellphone, sid, done, ct) {    session.getData('/memberRegJudge/'+cellphone, sid)        .end(function(res2) {            res2.statusCode.should.equal(406);            res2.should.be.json;            log(res2.body);            done();        })};describe('----商户会员测试模块----', function() {    it('验证用户登录，并获得sid。', function(done) {        signin({            cellphone:'18912345678',            password:'123456',            org:'1'        }, done);    });    it('返回当前商户的所有会员信息列表。', function(done) {        getList(sid, done);    });    //memberRegJudge_noReg    it('创建前-判断是否可以注册会员', function(done) {        memberRegJudge_beforeCreat(newJson.cellphone, sid, done);    });    it('创建会员并关联商户', function(done) {        addData(newJson, sid, done);    });    it('查询新增的会员', function(done) {        findOneData(dataId, sid, done);    });    it('创建后-判断是否可以注册会员', function(done) {        memberRegJudge_afterCreat(newJson.cellphone, sid, done);    });    it('更新会员', function(done) {        newJson._id = dataId;        newJson.pet_name = "测试更新-会员甲-将被删除";        updateData(newJson, sid, done);    });    it('查询更新的会员', function(done) {        findOneData(dataId, sid, done);    });    it('取消会员与商户的关联，删除数据。', function(done) {        deleteData(dataId, sid, done);    })});